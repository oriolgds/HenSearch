---
import StatusLayout from "../layouts/StatusLayout.astro";
---

<StatusLayout
  ><div class="h-screen flex items-center justify-center text-start">
    <div class="text-start">
      <h1 class="text-8xl font-bold">Status</h1>
      <p class="text-gray-600">
        Esta pagina muestra el estado del servidor, cuando ha estado caido y si
        esta activo actualmente
      </p>
      <canvas id="myChart"></canvas>
    </div>
  </div></StatusLayout
>

<script is:inline>
  function generateStatusArray(log) {
    const logs = log.log;
    const statusArray = [];

    // Parse timestamps into Date objects
    logs.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    // Normalize timestamps to remove seconds and milliseconds
    const normalizeTime = (timestamp) => {
      const date = new Date(timestamp);
      date.setSeconds(0, 0); // Set seconds and milliseconds to zero
      return date.toISOString();
    };

    // Preprocess logs to replace "inactive" with status 100
    const processedLogs = logs.map((entry) => ({
      timestamp: entry.timestamp,
      status: entry.status === "inactive" ? 100 : entry.status,
    }));

    // Create a Map of normalized timestamps to their statuses
    const logMap = new Map(
      processedLogs.map((entry) => [
        normalizeTime(entry.timestamp),
        entry.status,
      ])
    );

    // Get the range of timestamps
    const startTime = new Date(normalizeTime(logs[0].timestamp));
    const endTime = new Date(normalizeTime(logs[logs.length - 1].timestamp));

    let currentTime = new Date(startTime);

    // Iterate through every minute between start and end
    while (currentTime <= endTime) {
      const isoTime = currentTime.toISOString();
      if (logMap.has(isoTime)) {
        statusArray.push(logMap.get(isoTime)); // Add the status if timestamp exists
      } else {
        statusArray.push(0); // Fill gaps with 0
      }
      currentTime.setMinutes(currentTime.getMinutes() + 1); // Move to the next minute
    }

    return statusArray;
  }
</script>
<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script is:inline>
  const ctx = document.getElementById("myChart");
  // Function to fetch and parse the JSON file

  async function fetchAndParseJSON() {
    try {
      const response = await fetch("/status.json");

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json(); // Automatically parses JSON
      console.log("Parsed JSON:", data);
      return data;
    } catch (error) {
      console.error("Error fetching or parsing JSON:", error);
      return {};
    }
  }
  (async () => {
    // Call the function
    const jsonData = await fetchAndParseJSON();
    const statusArray = generateStatusArray(jsonData);
    console.log("status array ", statusArray);
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: Array(statusArray.length).fill(""),
        datasets: [
          {
            label: "Status",
            data: statusArray,
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  })();
</script>
}, });

